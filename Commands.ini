ارتقا سیستم و نصب پیش‌نیازها:
sudo apt update
sudo apt upgrade
sudo apt install python3 python3-pip python3-venv nginx


ایجاد محیط مجازی و نصب Flask و Gunicorn:
python3 -m venv myenv
source myenv/bin/activate
pip install flask gunicorn


ساخت ساختار پروژه:
mkdir -p ~/myproject
cd ~/myproject


ایجاد و ویرایش فایل codesafe.py:
nano codesafe.py
****************************************************

from flask import Flask, request, render_template, redirect, url_for
from flask import Flask, request, render_template, redirect, url_for
import os
from encrypt import encrypt
from decrypt import decrypt
from functools import wraps
from flask import Flask, request, render_template, redirect, url_for, Response

app = Flask(__name__)

def check_auth(username, password):
    return username == 'admin' and password == '0098'

def authenticate():
    return Response(
        'Please log in', 401,
        {'WWW-Authenticate': 'Basic realm="Login Required"'})

def requires_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not check_auth(auth.username, auth.password):
            return authenticate()
        return f(*args, **kwargs)
    return decorated

@app.route('/')
@requires_auth
def index():
    return render_template('login.html')

@app.route('/main', methods=['POST'])
def main_page():
    password = request.form.get('password')
    if password == 'msi':
        return render_template('index.html')
    else:
        return redirect(url_for('index'))

@app.route('/encrypt', methods=['POST'])
def encrypt_text():
    text = request.form['text']
    encrypted = encrypt(text)
    return render_template('result.html', result=encrypted, title='Encrypted')

@app.route('/decrypt', methods=['POST'])
def decrypt_text():
    text = request.form['text']
    decrypted = decrypt(text)
    return render_template('result.html', result=decrypted, title='Decrypted')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
)


****************************************************

ایجاد و ویرایش فایل encrypt.py:
nano encrypt.py
****************************************************

def encrypt(text):
    encrypted = ''
    for char in text:
        encrypted += str(ord(char)) + ' '
    return encrypted.strip()

****************************************************

ایجاد و ویرایش فایل decrypt.py:
nano decrypt.py
****************************************************

def decrypt(encrypted_text):
    decrypted = ''
    for num in encrypted_text.split():
        decrypted += chr(int(num))
    return decrypted

****************************************************

ایجاد دایرکتوری templates:
mkdir templates


ایجاد فایل templates/index.html:
nano templates/index.html

****************************************************

<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <title>Login Page</title>
    <style>
        body {
            background-color: black;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
        }
        .container {
            text-align: center;
        }
        input[type="password"] {
            width: 80%;
            padding: 12px;
            margin: 8px 0;
            box-sizing: border-box;
            font-size: 18px;
        }
        input[type="submit"] {
            background-color: blue;
            color: white;
            padding: 14px 20px;
            margin: 8px 0;
            border: none;
            cursor: pointer;
            font-size: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Login</h1>
        <form method="post" action="/main">
            <input type="password" name="password" placeholder="Enter Password">
            <input type="submit" value="Login">
        </form>
    </div>
</body>
</html>


****************************************************

ایجاد فایل templates/result.html:
nano templates/result.html

****************************************************

<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <title>{{ title }}</title>
    <style>
        body {
            background-color: black;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
            flex-direction: column;
        }
    </style>
</head>
<body>
    <h1>نتیجه:</h1>
    <p>{{ result }}</p>
    <a href="/">بازگشت</a>
</body>
</html>


****************************************************

اجرای اپلیکیشن با Gunicorn:
gunicorn --workers 3 codesafe:app


پیکربندی Nginx برای راه‌اندازی اپلیکیشن Flask:
ایجاد فایل پیکربندی Nginx:
sudo nano /etc/nginx/sites-available/myproject

****************************************************

server {
    listen 80;
    server_name taino.top www.taino.top 37.27.253.117 www.iranika.shop;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}



****************************************************

Nginx، صحت پیکربندی را بررسی کنید:
sudo nginx -t


راه‌اندازی مجدد Nginx: سرویس Nginx را مجدداً راه‌اندازی کنید:
sudo systemctl restart nginx


در صورتی که محیط مجازی فعال شود، دوباره Gunicorn را اجرا کنید:

gunicorn --workers 3 codesafe:app

****************************************************

تست دسترسی:
اکنون می‌توانید هر دو آدرس زیر را در مرورگر خود امتحان کنید:

دامنه: http://taino.top

آی‌پی: http://37.27.253.117


****************************************************

برای ورود مجدد به دارکتوری پروژه:

cd ~/myproject
source myenv/bin/activate
gunicorn --workers 3 codesafe:app

****************************************************

برای اینکه برنامه شما پس از ری‌استارت شدن سرور به صورت خودکار شروع به فعالیت کند:


sudo nano /etc/systemd/system/codesafe2.service

****************************************************

[Unit]
Description=Gunicorn instance to serve codesafe2
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=/root/myproject
Environment="PATH=/root/myproject/myenv/bin"
ExecStart=/root/myproject/myenv/bin/gunicorn --workers 3 --bind 0.0.0.0:5000 codesafe:app

[Install]
WantedBy=multi-user.target

****************************************************

سپس، دوباره سرویس Gunicorn را راه‌اندازی کنید:
راه‌اندازی سرویس Gunicorn:

bash
sudo systemctl start codesafe2
بررسی وضعیت سرویس:

bash
sudo systemctl status codesafe2

برای توقف موقت و دائمی سرویس:
توقف موقت:

bash
sudo systemctl stop codesafe2
توقف دائمی:

bash
sudo systemctl disable codesafe2
شروع مجدد سرویس:
فعال‌سازی مجدد سرویس:

bash
sudo systemctl enable codesafe2
شروع سرویس:

bash
sudo systemctl start codesafe2
فعال‌سازی مجدد سرویس:

bash
sudo systemctl enable codesafe2
شروع سرویس:

bash
sudo